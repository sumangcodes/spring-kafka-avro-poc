/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.spring_kafka_avro.event;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DoctorEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2358959951415239790L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DoctorEvent\",\"namespace\":\"com.example.spring_kafka_avro.event\",\"fields\":[{\"name\":\"doctor\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Doctor\",\"namespace\":\"com.example.spring_kafka_avro.dto\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"long\",\"java-class\":\"java.lang.Long\"}]},{\"name\":\"name\",\"type\":[\"null\",\"string\"]},{\"name\":\"specialty\",\"type\":[\"null\",\"string\"]},{\"name\":\"yearsOfExperience\",\"type\":{\"type\":\"int\",\"java-class\":\"java.lang.Integer\"}}]}]},{\"name\":\"eventType\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DoctorEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DoctorEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DoctorEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DoctorEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DoctorEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DoctorEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DoctorEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DoctorEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DoctorEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.example.spring_kafka_avro.dto.Doctor doctor;
  private java.lang.CharSequence eventType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DoctorEvent() {}

  /**
   * All-args constructor.
   * @param doctor The new value for doctor
   * @param eventType The new value for eventType
   */
  public DoctorEvent(com.example.spring_kafka_avro.dto.Doctor doctor, java.lang.CharSequence eventType) {
    this.doctor = doctor;
    this.eventType = eventType;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return doctor;
    case 1: return eventType;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: doctor = (com.example.spring_kafka_avro.dto.Doctor)value$; break;
    case 1: eventType = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'doctor' field.
   * @return The value of the 'doctor' field.
   */
  public com.example.spring_kafka_avro.dto.Doctor getDoctor() {
    return doctor;
  }


  /**
   * Sets the value of the 'doctor' field.
   * @param value the value to set.
   */
  public void setDoctor(com.example.spring_kafka_avro.dto.Doctor value) {
    this.doctor = value;
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public java.lang.CharSequence getEventType() {
    return eventType;
  }


  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(java.lang.CharSequence value) {
    this.eventType = value;
  }

  /**
   * Creates a new DoctorEvent RecordBuilder.
   * @return A new DoctorEvent RecordBuilder
   */
  public static com.example.spring_kafka_avro.event.DoctorEvent.Builder newBuilder() {
    return new com.example.spring_kafka_avro.event.DoctorEvent.Builder();
  }

  /**
   * Creates a new DoctorEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DoctorEvent RecordBuilder
   */
  public static com.example.spring_kafka_avro.event.DoctorEvent.Builder newBuilder(com.example.spring_kafka_avro.event.DoctorEvent.Builder other) {
    if (other == null) {
      return new com.example.spring_kafka_avro.event.DoctorEvent.Builder();
    } else {
      return new com.example.spring_kafka_avro.event.DoctorEvent.Builder(other);
    }
  }

  /**
   * Creates a new DoctorEvent RecordBuilder by copying an existing DoctorEvent instance.
   * @param other The existing instance to copy.
   * @return A new DoctorEvent RecordBuilder
   */
  public static com.example.spring_kafka_avro.event.DoctorEvent.Builder newBuilder(com.example.spring_kafka_avro.event.DoctorEvent other) {
    if (other == null) {
      return new com.example.spring_kafka_avro.event.DoctorEvent.Builder();
    } else {
      return new com.example.spring_kafka_avro.event.DoctorEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for DoctorEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DoctorEvent>
    implements org.apache.avro.data.RecordBuilder<DoctorEvent> {

    private com.example.spring_kafka_avro.dto.Doctor doctor;
    private com.example.spring_kafka_avro.dto.Doctor.Builder doctorBuilder;
    private java.lang.CharSequence eventType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.spring_kafka_avro.event.DoctorEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.doctor)) {
        this.doctor = data().deepCopy(fields()[0].schema(), other.doctor);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasDoctorBuilder()) {
        this.doctorBuilder = com.example.spring_kafka_avro.dto.Doctor.newBuilder(other.getDoctorBuilder());
      }
      if (isValidValue(fields()[1], other.eventType)) {
        this.eventType = data().deepCopy(fields()[1].schema(), other.eventType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing DoctorEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.spring_kafka_avro.event.DoctorEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.doctor)) {
        this.doctor = data().deepCopy(fields()[0].schema(), other.doctor);
        fieldSetFlags()[0] = true;
      }
      this.doctorBuilder = null;
      if (isValidValue(fields()[1], other.eventType)) {
        this.eventType = data().deepCopy(fields()[1].schema(), other.eventType);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'doctor' field.
      * @return The value.
      */
    public com.example.spring_kafka_avro.dto.Doctor getDoctor() {
      return doctor;
    }


    /**
      * Sets the value of the 'doctor' field.
      * @param value The value of 'doctor'.
      * @return This builder.
      */
    public com.example.spring_kafka_avro.event.DoctorEvent.Builder setDoctor(com.example.spring_kafka_avro.dto.Doctor value) {
      validate(fields()[0], value);
      this.doctorBuilder = null;
      this.doctor = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'doctor' field has been set.
      * @return True if the 'doctor' field has been set, false otherwise.
      */
    public boolean hasDoctor() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'doctor' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.example.spring_kafka_avro.dto.Doctor.Builder getDoctorBuilder() {
      if (doctorBuilder == null) {
        if (hasDoctor()) {
          setDoctorBuilder(com.example.spring_kafka_avro.dto.Doctor.newBuilder(doctor));
        } else {
          setDoctorBuilder(com.example.spring_kafka_avro.dto.Doctor.newBuilder());
        }
      }
      return doctorBuilder;
    }

    /**
     * Sets the Builder instance for the 'doctor' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.example.spring_kafka_avro.event.DoctorEvent.Builder setDoctorBuilder(com.example.spring_kafka_avro.dto.Doctor.Builder value) {
      clearDoctor();
      doctorBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'doctor' field has an active Builder instance
     * @return True if the 'doctor' field has an active Builder instance
     */
    public boolean hasDoctorBuilder() {
      return doctorBuilder != null;
    }

    /**
      * Clears the value of the 'doctor' field.
      * @return This builder.
      */
    public com.example.spring_kafka_avro.event.DoctorEvent.Builder clearDoctor() {
      doctor = null;
      doctorBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventType() {
      return eventType;
    }


    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public com.example.spring_kafka_avro.event.DoctorEvent.Builder setEventType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.eventType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public com.example.spring_kafka_avro.event.DoctorEvent.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DoctorEvent build() {
      try {
        DoctorEvent record = new DoctorEvent();
        if (doctorBuilder != null) {
          try {
            record.doctor = this.doctorBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("doctor"));
            throw e;
          }
        } else {
          record.doctor = fieldSetFlags()[0] ? this.doctor : (com.example.spring_kafka_avro.dto.Doctor) defaultValue(fields()[0]);
        }
        record.eventType = fieldSetFlags()[1] ? this.eventType : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DoctorEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<DoctorEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DoctorEvent>
    READER$ = (org.apache.avro.io.DatumReader<DoctorEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.doctor == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.doctor.customEncode(out);
    }

    if (this.eventType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.eventType);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.doctor = null;
      } else {
        if (this.doctor == null) {
          this.doctor = new com.example.spring_kafka_avro.dto.Doctor();
        }
        this.doctor.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.eventType = null;
      } else {
        this.eventType = in.readString(this.eventType instanceof Utf8 ? (Utf8)this.eventType : null);
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.doctor = null;
          } else {
            if (this.doctor == null) {
              this.doctor = new com.example.spring_kafka_avro.dto.Doctor();
            }
            this.doctor.customDecode(in);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.eventType = null;
          } else {
            this.eventType = in.readString(this.eventType instanceof Utf8 ? (Utf8)this.eventType : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










